JUnit and Mockito
----------------
Why Junit is important?

JUnit is a testing framework 
 
It helps developers test their code to make sure it works correctly.
Unit Testing: JUnit allows developers to test individual parts of their code to ensure they work as intended.
Code Quality: JUnit helps improve code quality by catching bugs early and ensuring reliability.
Refactoring: JUnit provides a safety net when making changes to existing code, making sure nothing breaks.

Best Practices while writing Junits
----------------------------------
Test Naming Convention

Test Structure: Follow the Arrange-Act-Assert (AAA) pattern in your tests. First, set up the necessary test data and objects (Arrange).
 Then, perform the action being tested (Act). Finally, verify the expected results (Assert).
Test Independence: Each test should be independent and not rely on the state or outcome of other tests. This ensures that tests can be executed individually without interference.
Test Coverage
Test Data: Use appropriate and representative test data to cover a wide range of scenarios. 
Test Assertions: Use relevant assertions to verify expected results. JUnit provides various assertion methods (e.g.,assertEquals(), assertTrue()).

What is Mockito in  JUnit?
---------------------------------
Mockito is a Java-based mocking framework used for unit testing of Java application. Its used in conjunction with other testing frameworks such as JUnit and TestNG. 
It internally uses Java Reflection API  in order to create mock objects for a given interface. 

Mock objects are nothing but proxy for actual implementations.



In mockito-based junit tests, 

@Mock annotation creates mocks (and what you do not want to call becomes the mock.)
 @InjectMocks creates actual objects and injects mocked dependencies into it.(what do you want to call becomes inject mock )


assertEquals(), assertTrue(), @Before, @After, @BeforeClass, @AfterClass, @assertArrayEquals()
testing exception @Test(expected = NullPointerException.class)
testing performance @Test (timeout=100) 

parametrized testing (can pass differnet test cases as collection and test it without writing the test cases separately for each )
1) use @RunWith(Parameterized.class) before class name
2) input and output defne it, and add taht as parameterized constructor
3) write all possible test cases as like below.

@Parameters
	public static Collection<String[]> allPossibleTestCases() {
		String testCases[][] = { 
				{"AABC", "BC"},
				{"MNC", "MNC"},
				{"All", "ll"}
		};
		return Arrays.asList(testCases);
	}
4) for passing that data..in test..use like below.
assertEquals(output, helper.truncateAInFirst2Positions(input)); 

SUT
-------
System under test (SUT) refers to a system that is being validated by the testers. The terminology is also known as application under test.

Stub: return some dummy data.

Mocks and stubs are fake Java classes that replace these external dependencies. 
These fake classes are then instructed before the test starts to behave as you expect.

Stub and Mock are dummy object, but more precisely, a Stub is an object that simulates real objects with the minimum number of methods required for a test.
For example, if your class is dependent upon the database, you can use HashMap to simulate database operation.

On the other Mock objects are usually created by open-source libraries and mock frameworks like Mockito, 
jMock and EasyMock. These library helps to create, verify, and stub mocks.

 Stub object is usually used for state verification, while mock object is mostly used for behaviour verification.

In general - Mock means implement some behavior, 
stubs - just supply some data. in other words preferable use the work mock when you need to demonstrate that it changes/keeps some state

use the word stub when your classes only expose the internal state. indeed you can use mock everywhere, and stub is just subset of mock

Verify calls on mocks
-------------------------
if we have certain condition for delete and has some logic associated there.

 In simple terms, it validates the certain behavior that happened once in a test
 . It is used at the bottom of the testing code to assure that the defined methods are called.
 
 

(e.g) if(!todo.contains("Spring")) {
         todoService.deleteToDo(todo);
       }

      verify(toDoServiceMock).deleteToDo("Learn to Dance") // to verify for this argument the deleteToDo is called..
	  verify(todoServiceMock, never()).deleteToDo("Learn Spring") //  to verify for this argument the deleteToDo is NOT called..
	(or) 
// In BDD format: then(toDoServiceMock).should(never()).deleteToDo("Learn to Dance");	
	   verify(todoServiceMock, times(1)).deleteToDo("Learn Spring") //  to verify for this argument, number of times it gets called.
	  verify(todoServiceMock, atleastOnce()).deleteToDo("Learn Spring") //  to verify for this argument, atleast once its calling.
	
	// In BDD format: then(toDoServiceMock).should(never()).deleteToDo("Learn to Dance");(then is similar to verify)
	
Argument Capture
----------------
It is useful when you want to check the values that are passed to a mocked method.	

 1) declare argument captor
	ArgumentCaptor<String> stringArgumentCaptor = ArgumentCaptor.forClass(String.class)
 2) stringArgumentCaptor.capture()
    then(toDoServiceMock).should(never()).deleteToDo(stringArgumentCaptor.capture());
 3) stringArgumentCaptor.getValue()
   assertThat(stringArgumentCaptor.getValue(), is("Learn to Dance"))
   
   If argument capture occurs multiple times.
  assertThat(stringArgumentCaptor.getAllValues().size(), is(2))
  then(toDoServiceMock).should(times(2)).deleteToDo(stringArgumentCaptor.capture())
  
  
Hamcrest Mathchers
-------------------
press ctrl+o to show all method to be listed.in a class or java file.

List<Integer> scores = Arrays.asList(90,98,89,78);

asserThat(scores, hasSize(4))
hasItem(99);
everyItem(greaterThan(90))
isEmptyString()

Mockito Annotation
-----------------------
@Mock
@InjectMocks
@RunWith(MockitoJunitRunner.class)
@captor

One Junit class can have only one runner, so only one @RunWith, we can't both runner together e.g SpringJunitRunner
In order to solve this , @Rule can be used.

@Rule
public MockitoRule mr = MockitoJunit.rule(); 

prefer @Rule over @RunWith

@Rule : Basically for multiple runners
@RunWith: Basically for one runner
 
Spy 
----------
A spy gets all the logic from the class and overrides some of them if we want.

List arrayListMock = mock(ArrayList.class)  // to mock
List arrayListSpy = spy(ArrayList.class) // to spy the arraylist with some overriding stuff.

stub(arrayListSpy.size()).toReturn(5); // always returns 5...here it overrides.

arrayListSpy.add("test");
verify(arrayListSpy).add("test");
verify(arrayListSpy, never()).clear();

power  mock ( can mock static, private, constructor etc)
--------------------------------------------------------------
PowerMock is an open-source Java framework used for creating a mock object in unit testing.
 It extends other mocking frameworks such as EasyMock and Mockito to enhance the capabilities.
enable the mocking of static methods, final classes, final methods, private methods, constructor, and removal of static initializers. 

The main aim of PowerMock is to extend the existing APIs with some methods and annotations to provide extra features that make unit testing quite easy.

@RunWith(PowerMockRunner.class)
@PrepareForTest(StaticClassName.class) // class containing static method to be mocked.

Whitebox.invokeMethod(className, privateMethodName); // to call private method


Two important things in junit
-----------------------------------
1) Readability (name should be logical, it should say what it is testing)
2) test should fail only when the real logic fails.

how to name a test
--------------------
Syntax: whichMethod_whatScenario_whatIsResult

Example: saveChangedProducts_ProductInScreenAndNotInDatabase_ProductIsInserted()

tip2: use given when then format.


RestaurantControllerTest
----------------------------------

package com.codeddecode.restaurantlisting.controller;


import com.codeddecode.restaurantlisting.dto.RestaurantDTO;
import com.codeddecode.restaurantlisting.service.RestaurantService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class RestaurantControllerTest {

    @InjectMocks
    RestaurantController restaurantController;

    @Mock
    RestaurantService restaurantService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this); //in order for Mock and InjectMocks annotations to take effect, you need to call MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testFetchAllRestaurants(){
        // Mock the service behavior
        List<RestaurantDTO> mockRestaurants = Arrays.asList(
                new RestaurantDTO(1, "Restaurant 1", "Address 1", "city 1", "Desc 1"),
                new RestaurantDTO(2, "Restaurant 2", "Address 2", "city 2", "Desc 2")
        );
        when(restaurantService.findAllRestaurants()).thenReturn(mockRestaurants);

        // Call the controller method
        ResponseEntity<List<RestaurantDTO>> response = restaurantController.fetchAllRestaurants();

        // Verify the response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockRestaurants, response.getBody());

        // Verify that the service method was called
        verify(restaurantService, times(1)).findAllRestaurants();
    }

    @Test
    public void testSaveRestaurant() {
        // Create a mock restaurant to be saved
        RestaurantDTO mockRestaurant =  new RestaurantDTO(1, "Restaurant 1", "Address 1", "city 1", "Desc 1");

        // Mock the service behavior
        when(restaurantService.addRestaurantInDB(mockRestaurant)).thenReturn(mockRestaurant);

        // Call the controller method
        ResponseEntity<RestaurantDTO> response = restaurantController.saveRestaurant(mockRestaurant);

        // Verify the response
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(mockRestaurant, response.getBody());

        // Verify that the service method was called
        verify(restaurantService, times(1)).addRestaurantInDB(mockRestaurant);
    }

    @Test
    public void testFindRestaurantById() {
        // Create a mock restaurant ID
        Integer mockRestaurantId = 1;

        // Create a mock restaurant to be returned by the service
        RestaurantDTO mockRestaurant = new RestaurantDTO(1, "Restaurant 1", "Address 1", "city 1", "Desc 1");

        // Mock the service behavior
        when(restaurantService.fetchRestaurantById(mockRestaurantId)).thenReturn(new ResponseEntity<>(mockRestaurant, HttpStatus.OK));

        // Call the controller method
        ResponseEntity<RestaurantDTO> response = restaurantController.findRestaurantById(mockRestaurantId);

        // Verify the response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockRestaurant, response.getBody());

        // Verify that the service method was called
        verify(restaurantService, times(1)).fetchRestaurantById(mockRestaurantId);
    }
}

RestaurantServiceTest
-------------------------------


package com.codeddecode.restaurantlisting.service;

import com.codeddecode.restaurantlisting.dto.RestaurantDTO;
import com.codeddecode.restaurantlisting.entity.Restaurant;
import com.codeddecode.restaurantlisting.mapper.RestaurantMapper;
import com.codeddecode.restaurantlisting.repo.RestaurantRepo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class RestaurantServiceTest {

    @Mock
    RestaurantRepo restaurantRepo;

    @InjectMocks
    RestaurantService restaurantService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this); //in order for Mock and InjectMocks annotations to take effect, you need to call MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testFindAllRestaurants() {
        // Create mock restaurants
        List<Restaurant> mockRestaurants = Arrays.asList(
                new Restaurant(1, "Restaurant 1", "Address 1", "city 1", "Desc 1"),
                new Restaurant(2, "Restaurant 2", "Address 2", "city 2", "Desc 2")
        );
        when(restaurantRepo.findAll()).thenReturn(mockRestaurants);

        // Call the service method
        List<RestaurantDTO> restaurantDTOList = restaurantService.findAllRestaurants();

        // Verify the result
        assertEquals(mockRestaurants.size(), restaurantDTOList.size());
        for (int i = 0; i < mockRestaurants.size(); i++) {
            RestaurantDTO expectedDTO = RestaurantMapper.INSTANCE.mapRestaurantToRestaurantDTO(mockRestaurants.get(i));
            assertEquals(expectedDTO, restaurantDTOList.get(i));
        }

        // Verify that the repository method was called
        verify(restaurantRepo, times(1)).findAll();
    }

    @Test
    public void testAddRestaurantInDB() {
        // Create a mock restaurant to be saved
        RestaurantDTO mockRestaurantDTO = new RestaurantDTO(1, "Restaurant 1", "Address 1", "city 1", "Desc 1");
        Restaurant mockRestaurant = RestaurantMapper.INSTANCE.mapRestaurantDTOToRestaurant(mockRestaurantDTO);

        // Mock the repository behavior
        when(restaurantRepo.save(mockRestaurant)).thenReturn(mockRestaurant);

        // Call the service method
        RestaurantDTO savedRestaurantDTO = restaurantService.addRestaurantInDB(mockRestaurantDTO);

        // Verify the result
        assertEquals(mockRestaurantDTO, savedRestaurantDTO);

        // Verify that the repository method was called
        verify(restaurantRepo, times(1)).save(mockRestaurant);
    }

    @Test
    public void testFetchRestaurantById_ExistingId() {
        // Create a mock restaurant ID
        Integer mockRestaurantId = 1;

        // Create a mock restaurant to be returned by the repository
        Restaurant mockRestaurant = new Restaurant(1, "Restaurant 1", "Address 1", "city 1", "Desc 1");

        // Mock the repository behavior
        when(restaurantRepo.findById(mockRestaurantId)).thenReturn(Optional.of(mockRestaurant));

        // Call the service method
        ResponseEntity<RestaurantDTO> response = restaurantService.fetchRestaurantById(mockRestaurantId);

        // Verify the response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockRestaurantId, response.getBody().getId());

        // Verify that the repository method was called
        verify(restaurantRepo, times(1)).findById(mockRestaurantId);
    }

    @Test
    public void testFetchRestaurantById_NonExistingId() {
        // Create a mock non-existing restaurant ID
        Integer mockRestaurantId = 1;

        // Mock the repository behavior
        when(restaurantRepo.findById(mockRestaurantId)).thenReturn(Optional.empty());

        // Call the service method
        ResponseEntity<RestaurantDTO> response = restaurantService.fetchRestaurantById(mockRestaurantId);

        // Verify the response
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(null, response.getBody());

        // Verify that the repository method was called
        verify(restaurantRepo, times(1)).findById(mockRestaurantId);
    }



}
  
   
   
   
   