1) How to convert int array to List<Integer>

	int[] arr = { 1, 2, 3, 4, 5 };
	List<Integer> list = new ArrayList<>(arr.length);
	for (int i: arr) {
		list.add(Integer.valueOf(i));
	}
	
	Using java 8 
	Convert the specified primitive array to a sequential stream using Arrays.stream().
	Box each element of the stream to an Integer using IntStream.boxed().
	Use Collectors.toList() to accumulate the input elements into a new list.
	
	int[] arr = { 1, 2, 3, 4, 5 };
	List<Integer> list = Arrays.stream(arr)        // IntStream
								.boxed()          // Stream<Integer>
								.collect(Collectors.toList());
								
								// or using `IntStream.of()`
	List<Integer> list = IntStream.of(arr)    // returns IntStream
								.boxed()
								.collect(Collectors.toList());
	System.out.println(list);
	
	to count number of 9's are present
	// Arrays.stream(nums).boxed().filter(num -> num == 9).count();
	
	
2) Output formatter
System.out.printf("%-15s%03d %n", s1, x);// string left justified 15 character, 3 digit integer if less then leading zeros should be added.
java           100 
cpp            065 

3) Java Datatypes (number can fit in diffrent datatypes)	
		 try
            {
                long x=sc.nextLong();
                System.out.println(x+" can be fitted in:");
                if(x>=(Byte.MIN_VALUE) && x<=(Byte.MAX_VALUE)){
                    System.out.println("* byte");
                }
                if(x>=(Short.MIN_VALUE) && x<=(Short.MAX_VALUE)){
                    System.out.println("* short");
                }
                if(x>=(Integer.MIN_VALUE) && x<=(Integer.MAX_VALUE)){
                    System.out.println("* int");
                }
                if(x>=(Long.MIN_VALUE) && x<=(Long.MAX_VALUE)){
                    System.out.println("* long");
                }
                
            }
            catch(Exception e)
            {
                System.out.println(sc.next()+" can't be fitted anywhere.");
            }

4) To print day of a particular date. (java 8)
 
   LocalDate ld = LocalDate.of(year, month, day);
      return ld.getDayOfWeek().toString();			

5) Java Currency Formatter

   NumberFormat us_nf = NumberFormat.getCurrencyInstance(Locale.US);
	String us = us_nf.format(payment);
	NumberFormat in_nf = NumberFormat.getCurrencyInstance(new Locale("en", "IN"));
	String india = in_nf.format(payment);
	NumberFormat china_nf = NumberFormat.getCurrencyInstance(Locale.CHINA);
	String china = china_nf.format(payment);
	NumberFormat france_nf = NumberFormat.getCurrencyInstance(Locale.FRANCE);
	String france = france_nf.format(payment);
	
	System.out.println("US: " + us);
	System.out.println("India: " + india);
	System.out.println("China: " + china);
	System.out.println("France: " + france);
	Output:
		US: $12,324.13
		India: Rs.12,324.13
		China: ￥12,324.13
		France: 12 324,13 €		
		
6) Print your name 1000 times without using any loop in Java
Method 1:

String name = "Jacek"; 
String str = "X"; 
str = str.replaceAll("X", "XXXXXXXXXX"); 
str = str.replaceAll("X", "XXXXXXXXXX"); 
str = str.replaceAll("X", "XXXXXXXXXX"); 
str = str.replaceAll("X", name + "\n"); 
System.out.println(str); 

Method 2: (Using Recursion)
public static void main(String[] args) { 
		int count = 1; 
		printName(count); 
} 
 
	public static void printName(int count) { 
		int max = 1000; 
		if (count <= max) { 
			System.out.println("Aishwarya " + count); 
			count++; 
			printName(count); 
		} 
	} 
	
Method 3:
----------
System.out.print(String.format("%01000d",0).replace("0","Shreyash\n")); // leading 0's

Method 4:
-------------
String name = "Ashfaq"
String s= "i"
s=s.replaceAll("i","iiiiiiiiii");// 10 times
s=s.replaceAll("i","iiiiiiiiii"); // 100 times
s=s.replaceAll("i","iiiiiiiiii"); // 1000 times
s=s.replaceAll("i", name+ "\n");
Syso(s);

Method 5:
------------
 System.out.print(String.join("\n", Collections.nCopies(10, "Mkyong")));

Method 6:
----------
String[] str = new String[10];
        Arrays.fill(str, "Mkyong");
        System.out.println(String.join("\n", str));

Method 7: (Using java 11)
-------------
String str = "Mkyong\n";
 System.out.println(str.repeat(10));		


7) 
String str4 = String.format("%x", 101);          // Hexadecimal value  prints: 65
String str5 = String.format("%o", 100);          // Char value  prints 144
	
	
8) Initializing some user values in the service layer with birthday.

@Component
public class UserDaoService {

  private static List<User> users = new ArrayList<>();
  
  static {
     users.add(new User(1, "Adam", LocalDate.now().minusYears(30)));
	 users.add(new User(2, "John", LocalDate.now().minusYears(20)));
  }
  
  public List<User> findAll() {
    return users;
  }
}

Swap without temp variable
---------------------------------
x = x + y;
 y = x - y;
 x = x - y;
 System.out.println("After Swapping\nx = "+x+"\ny = "+y)
 

Print Reverse number in java program
--------------------------------------------
int reverse = 0;
while( n != 0 )
 {
 reverse = reverse * 10;
 reverse = reverse + n%10;
 n = n/10;
 }
 System.out.println("Reverse of entered number is "+reverse) 
 
Print all alphabet using for loop Program in java 
-------------------------------------------------------'
for( ch = 'a' ; ch <= 'z' ; ch++ )
 System.out.println(ch);
 }
 
Map shortcut getOrDefault
----------------------------

Map<Character, Integer> map = new HashMap<Character, Integer>();
		
		/Method 1
		for(Character ch: s.toCharArray()) {
			if(map.containsKey(ch)) {
				map.put(ch, map.get(ch)+1);
			} else {
				map.put(ch, 1);
			}
		}
		
		// Methhod 2
		for (char c : s.toCharArray()) {
			map.put(c, map.getOrDefault(c, 0) + 1);
        } 
 
 
To find Duplicate in Java 8
-------------------------------------
Three ways to get the duplicate elements.

1) Filter & Set.add()  [ Set.add() returns false if the element was already in the set.]
list.stream().filter(n -> !items.add(n)).collect(Collectors.toSet());

2) Map & Collectors.groupingBy

return list.stream()
                .collect(Collectors.groupingBy(Function.identity()
                        , Collectors.counting()))    // create a map {1=1, 2=1, 3=2, 4=2, 5=1, 7=1, 9=2}
                .entrySet().stream()                 // Map -> Stream
                .filter(m -> m.getValue() > 1)       // if map value > 1, duplicate element
                .map(Map.Entry::getKey)
                .collect(Collectors.toSet());
				
3) Collections.frequency
list.stream().filter(i -> Collections.frequency(list, i) > 1).collect(Collectors.toSet());

Collections sort
---------------------
Collections.sort(al,Collections.reverseOrder()); 
Collections.sort()


Anagram
-----------
 char[] ArrayS1 = s1.toLowerCase().toCharArray();  
char[] ArrayS2 = s2.toLowerCase().toCharArray();  
Arrays.sort(ArrayS1);  
Arrays.sort(ArrayS2);  
status = Arrays.equals(ArrayS1, ArrayS2); 

Second Largest
----------------------
 List<Integer> numbers = Arrays.asList(5, 3, 9, 1, 6, 7, 9, 8, 2);

Optional<Integer> secondLargest = numbers.stream()
										 .distinct()
										 .sorted(Comparator.reverseOrder())
										 .skip(1)
										 .findFirst();





// function to merge two arrays 
--------------- ----------------------- 
public static <T> Object[] mergeArray(T[] arr1, T[] arr2)   
{   
return Stream.of(arr1, arr2).flatMap(Stream::of).toArray();   
}  

// Descending Iterator TreeSet
------------------------------------
TreeSet<String> set=new TreeSet<String>();  
         set.add("Ravi");  
         set.add("Vijay");  
         set.add("Ajay");  
         System.out.println("Traversing element through Iterator in descending order");  
		  System.out.println("Reverse Set: "+set.descendingSet());  
         Iterator i=set.descendingIterator();  
         while(i.hasNext())  
         {  
             System.out.println(i.next());  
         } 
		 
Palimdrome
------------------            
public boolean isPalindrome(String input) {
 int left = 0, right = input.length() - 1;
 while (left < right) {
 if (input.charAt(left) != input.charAt(right)) {
 return false;
 }
 left++;
 right--;
 }
 return true;
}


Comaprator
---------------
class AgeComparator implements Comparator{  
public int compare(Object o1,Object o2){  
Student s1=(Student)o1;  
Student s2=(Student)o2;  
  
if(s1.age==s2.age)  
return 0;  
else if(s1.age>s2.age)  
return 1;  
else  
return -1;  
}  
}  

class NameComparator implements Comparator{  
public int compare(Object o1,Object o2){  
Student s1=(Student)o1;  
Student s2=(Student)o2;  
  
return s1.name.compareTo(s2.name);  
}  
}  

ArrayList al=new ArrayList();  
al.add(new Student(101,"Vijay",23));  
al.add(new Student(106,"Ajay",27));  
al.add(new Student(105,null,21));  
  
System.out.println("Sorting by Name");  
  
Collections.sort(al,new NameComparator());  
Collections.sort(al,new AgeComparator());  


In java 8:
Comparator<Student> cm1=Comparator.comparing(Student::getName);  
Collections.sort(al,cm1);  

Comparator<Student> cm2=Comparator.comparing(Student::getAge);  
Collections.sort(al,cm2); 

nullsFirst and nullsLast.
Comparator<Student> cm1=Comparator.comparing(Student::getName,Comparator.nullsFirst(String::compareTo));  
  Collections.sort(al,cm1);  

 Comparator<Student> cm2=Comparator.comparing(Student::getName,Comparator.nullsLast(String::compareTo));  
  Collections.sort(al,cm2);    
		
		
	
Java 8
-------------
public Employee(int id, String name, int age, String gender, String department, int yearOfJoining, double salary) 
    {
        this.id = id;
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.department = department;
        this.yearOfJoining = yearOfJoining;
        this.salary = salary;
    }
	
List<Employee> employeeList = new ArrayList<Employee>();

        employeeList.add(new Employee(111, "Jennifer", 22, "Female", "HR", 2017, 55000.0));
        employeeList.add(new Employee(112, "Rohit", 35, "Male", "Sales And Marketing", 2019, 23500.0));
        employeeList.add(new Employee(113, "Shubman", 29, "Male", "Infrastructure", 2019, 28000.0));
        employeeList.add(new Employee(114, "Rinku", 28, "Male", "Product Development", 2020, 62500.0));
        employeeList.add(new Employee(115, "Aaditi", 41, "Female", "HR", 2022, 29700.0));
        employeeList.add(new Employee(116, "Mahendra", 43, "Male", "Security And Transport", 2023, 20500.0));
	

Sort Based on ASC Order.

empList
	