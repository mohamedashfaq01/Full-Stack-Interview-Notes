Java Memory Management
---------------------------
 Java uses a process called Garbage Collection to manage memory automatically,
 freeing developers from having to manually manage memory like in other programming languages (e.g., C++).
 
 Memory Types in Java:

Heap Memory: This is where Java stores objects (instances of classes). When you create an object using new, it is placed in the heap.
Stack Memory: This stores method calls and local variables. Each time a method is called, its data is placed in the stack,
 and when the method finishes, its data is removed from the stack.


Components of Java Memory:
Heap Memory:

The heap is divided into Young Generation, Old Generation, and Permanent Generation (or Metaspace).

Young Generation: This is where new objects are created. It is further divided into:

Eden Space: Where all new objects are initially created.
Survivor Spaces: Objects that survive after a few rounds of garbage collection in Eden are moved here.

Old Generation: Objects that have been around for a while and are still being used are moved to the Old Generation.
 This space is larger than the Young Generation and is garbage collected less frequently.

Permanent Generation (Metaspace): This holds metadata, class definitions, and static content. From Java 8 onward, the PermGen has been replaced with Metaspace.

Stack Memory:

Each thread has its own stack. The stack holds:

Method calls: When a method is invoked, it’s added to the stack.
Local variables: Variables inside methods are stored here.

Once the method execution finishes, the associated memory is removed from the stack.

Garbage Collection Process:

Objects in the Young Generation are collected frequently (minor GC).
Objects in the Old Generation are collected less often (major GC).
Unused objects are automatically removed, freeing memory for new objects.

comparison between Permanent Generation (PermGen) and Metaspace

Feature		Permanent Generation (PermGen)					Metaspace
Location	Located in the heap memory.						Located in native memory (outside the heap).
Size Limit	Fixed size, can lead to OutOfMemoryError.		Dynamically resizes, limited by available system memory.
Garbage Collection	Garbage collected only during Full GC.	Garbage collected during both Full GC and minor GC.
Performance	May lead to performance issues due to fixed size.	Generally improves performance with dynamic resizing.
Usage in Java Versions	Present in Java 7 and earlier versions.	Introduced in Java 8, replacing PermGen


Internal Working of HashMap.
----------------------------------
What is Hashing
It is the process of converting an object into an integer value. The integer value helps in indexing and faster searches.

equals(): It checks the equality of two objects. It compares the Key, whether they are equal or not. 
It is a method of the Object class. It can be overridden. If you override the equals() method, then it is mandatory to override the hashCode() method.

hashCode(): This is the method of the object class. It returns the memory reference of the object in integer form.
 The value received from the method is used as the bucket number. The bucket number is the address of the element inside the map. Hash code of null Key is 0.
 
Buckets: Array of the node is called buckets. Each node has a data structure like a LinkedList. More than one node can share the same bucket. It may be different in capacity.

Resize Operation: When the HashMap exceeds a certain load factor (default is 0.75), it resizes by doubling the bucket array size

Collision Handling: If two keys produce the same index (collision), HashMap uses a Linked List (or Balanced Tree in Java 8+) to store multiple key-value pairs in the same bucket.

In Java 8 and above, once the number of collisions in a bucket exceeds a certain threshold (typically 8), 
the Linked List is converted into a Balanced Tree (Red-Black Tree) for better performance (O(log n)).

Put: We use put() method to insert the Key and Value pair in the HashMap. The default size of HashMap is 16 (0 to 15).

Working:
First it will get the key and calculate the hashcode and then find the bucket index (hashcode & length -1).
then it will put that value in that bucket.
If there is any hash collision then it will check the equals method.

If the value is already exist in the bucket it will create the node in the existing ode like a linkedList.
In Java 8 and above, once the number of collisions in a bucket exceeds a certain threshold (typically 8), 
the Linked List is converted into a Balanced Tree (Red-Black Tree) for better performance (O(log n)).

Equals and Hashcode contract
-------------------------------------
1) If two objects are equal according to the equals() method, they must have the same hashCode() value.
2) If two objects have the same hashCode(), they are not necessarily equal according to the equals() method.
Two different objects can have the same hash code (this is called a collision), but the equals() method will further check if they are logically the same object.

Violating the Contract:
If you don't properly implement hashCode() and equals():

Equal objects may end up in different buckets, causing lookup failures in collections like HashMap or HashSet.
You may get unexpected results, such as objects that appear to be missing from collections or duplicate entries.

To consider two objects as duplicates based on name and phone number:
Steps:
Override the equals() method to compare the name and phoneNumber fields.
Override the hashCode() method to compute the hash based on name and phoneNumber

class Person {
    private String name;
    private String phoneNumber;

    // Constructor
    public Person(String name, String phoneNumber) {
        this.name = name;
        this.phoneNumber = phoneNumber;
    }

    // Getters, Setters (Optional, depending on your use case)

    @Override
    public boolean equals(Object obj) {
        // Check if this is the same object
        if (this == obj) return true;
        // Check for null and ensure the objects are of the same class
        if (obj == null || getClass() != obj.getClass()) return false;

        // Cast to Person and compare name and phoneNumber
        Person person = (Person) obj;
        return name.equals(person.name) && phoneNumber.equals(person.phoneNumber);
    }

    @Override
    public int hashCode() {
        // Generate a hash based on name and phoneNumber
        return Objects.hash(name, phoneNumber);
    }
}

Set<Person> personSet = new HashSet<>();
personSet.add(p1);
personSet.add(p2);

System.out.println(personSet.size());  // Output: 1 (because p1 and p2 are duplicates)

Can we use object as a key in hashmap in Java?
------------------------------------------------
You can use objects as keys in a HashMap in Java, but you must override equals() and hashCode() methods in the key class to ensure correct behavior.
Using immutable objects as keys is recommended to avoid issues caused by modifying the state of the key after it has been added to the HashMap.

What is WeakHashMap.
----------------------------
A WeakHashMap in Java is a special type of Map where the keys are stored as weak references. 
This means that if a key is no longer in use (i.e., not referenced anywhere else in the application), 
the garbage collector (GC) will automatically remove the key-value pair from the map.

Use Case: Useful for implementing cache where you don’t want to prevent objects from being garbage collected when they are no longer needed.

why we should use interface and class combination like Map<Integer> map = new HashMap();
--------------------------------------------------------------------------------------------
// Using interface reference and class implementation
        Map<Integer, String> map = new HashMap<>();
        map.put(1, "One");
        map.put(2, "Two");

        System.out.println(map);

        // Switching to another implementation (e.g., TreeMap)
        map = new TreeMap<>();
        map.put(3, "Three");
        map.put(4, "Four");

        System.out.println(map);

In the above code:
We declare map as Map<Integer, String>, which allows us to easily switch from HashMap to TreeMap without changing the rest of the code that interacts with map.	

Declaring variables as interfaces (like Map) instead of concrete classes (like HashMap) provides flexibility, loose coupling, abstraction, and easier maintainability. 
It allows you to change the implementation later without affecting the rest of your code and promotes better software design.	

Diff between SynchronizedMap and ConcurrentHashMap
---------------------------------------------------------
Synchronized Map:
When a method in a synchronized map (like Collections.synchronizedMap) is accessed, the entire map is locked for that thread. 
This means that only one thread can access the map at any given time.


ConcurrentHashMap:
It allows multiple threads to read and write to the map concurrently without blocking each other. This is achieved through a technique called lock striping, 
where the map is divided into segments (or buckets), and each segment can be locked independently. This greatly enhances performance in multi-threaded scenarios,
 as it reduces contention.leading to a significant performance bottleneck in multi-threaded environments,
 especially when many threads try to read and write to the map simultaneously.
 
Feature					SynchronizedMap												ConcurrentHashMap
Locking Mechanism		Entire map locked on every operation						Fine-grained locking (lock striping) (bucket-level)
Concurrency				Only one thread can access the map at a time (full lock) 	Multiple threads can read and write concurrently
Read Operations			Synchronized, blocking all threads							Non-blocking for reads (no lock required)
Write Operations		Locks the entire map for each write							Locks only relevant segment, allowing partial concurrency
Iteration				Requires manual synchronization								Iterators are weakly consistent, no explicit lock needed
Atomic Operations		Not natively supported										Atomic operations like putIfAbsent(), replace() available
Ideal Use Case			Suitable for small-scale or 								Suitable for high-concurrency environments
						single-threaded applications	
Summary:
Synchronized Map is simpler but slower in concurrent environments.
ConcurrentHashMap is optimized for better scalability and performance, especially under heavy multi-threading.	

15) HashTable vs ConcurrentHashMap. 
-----------------------------------------
Hashtable is a legacy synchronized map that provides basic thread safety but can lead to performance issues.
Iterators are not fail-safe; they throw ConcurrentModificationException if modified during iteration.

ConcurrentHashMap is designed for high concurrency and better performance. It allows multiple threads to read and write concurrently without blocking the entire map,
Iterators are fail-safe and provide a snapshot of the map at the time of iteration.
					

5) what kind of tree is used in treeset and treemap?
Both TreeSet and TreeMap use a Red-Black Tree to maintain sorted order and ensure that operations like insertion,
 deletion, and lookup can be performed in O(log n) time, making them efficient for handling large datasets with sorted elements or keys.

How to create Custom annotation
------------------------------------
@Retention(RetentionPolicy.RUNTIME)  // Required to retain at runtime for reflection or AOP
@Target(ElementType.METHOD)          // Specifies where the annotation can be applied
public @interface LogExecutionTime {
}

Externalization
---------------------
Externalization in Java is a mechanism to control the serialization process by implementing the Externalizable interface.
 It allows you to define custom serialization logic, which can be more efficient than the default serialization
 
Two Methods: You must implement two methods:
writeExternal(ObjectOutput out): To write the object's state.
readExternal(ObjectInput in): To read the object's state.

Performance: 
May be less efficient due to default serialization of all fields.

A public no-arg constructor is mandatory for Externalizable.	
Can be more efficient as you can control the serialization process. (Externalization)
Externalization offers fine-grained control over serialization and deserialization, 
allowing developers to customize how objects are serialized, but it requires more effort to implement correctly.

JVM and class loaders
-------------------------
JVM (Java Virtual Machine) is an abstract machine. 
It is called a virtual machine because it doesn't physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed.

The JVM performs the following main tasks:

Loads code
Verifies code
Executes code
Provides runtime environment

JRE: The Java Runtime Environment is a set of software tools which are used for developing Java applications.
It physically exists. It contains a set of libraries + other files that JVM uses at runtime.

Class Loaders
-------------------
class loaders are responsible for loading classes into memory at runtime.

1. Bootstrap Class Loader
The top-level class loader that loads the core Java classes from the Java Runtime Environment (JRE), such as java.lang, java.util, and other essential classes.
Parent: It does not have a parent class loader.

2. Extension Class Loader
Loads classes from the Java extension directories, which typically contain additional libraries. These directories are specified by the java.ext.dirs system property.
Parent: Its parent is the Bootstrap Class Loader.

3. System Class Loader
This loader is used for loading user-defined classes and third-party libraries. 
Parent: Its parent is the Extension Class Loader.

Why String objects are immutable in Java?
-----------------------------------------------
As Java uses the concept of String literal. Suppose there are 5 reference variables, all refer to one object "Sachin".
If one reference variable changes the value of the object, it will be affected by all the reference variables. That is why String objects are immutable in Java.

And also, It uses less heap momory, Thread safe, Security (username and password can't modify by an intruder).

Exception
-----------------
Compile Time Error and in Run Time exception will be thrown  

example: ClassDefNotFoundError and ClassNotFoundException.

Checked Exception Must be declared in the method signature or caught in a try-catch block.  IOException, SQLException, FileNotFoundException.
Unchecked Exception Optional to handle; can be caught but not required. NullPointerException, ArrayIndexOutOfBoundsException, IllegalArgumentException.

If we're overriding method in parent class, and parent class throws an exception.
Then child class method can only throw 
1) No Exception.
2) Same Exceptoon.
3) Child of the parent method exception."But cannot throw bigger exception")

Custom Unchecked Eception
-------------------------------
public class CustomUncheckedException extends RuntimeException {
    public CustomUncheckedException(String message) {
        super(message);
    }
}
public class Example {
    public void validate(int value) {
        if (value < 0) {
            throw new CustomUncheckedException("Value must be non-negative.");
        }
        // Continue processing...
    }
}



ClassCast Exception in TreeSet
If we add an object of the class that is not implementing the Comparable interface, the ClassCast Exception is raised. Observe the following program.

Shallow Copy and Deep Copy
--------------------------------

Shallow Copy: Copies the object's fields and references, but Original and copy share the same references, Less memory usage.
In Person class: implements cloneable
// Method to create a shallow copy
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
	(Only in person class, we'll not implement cloneable in address class).
	

Deep Copy: Copies the object's fields and references, but Original and copy share the different references, Moremoemory Usage.
In Person class: implements cloneable
// Method to create a deep copy of Person
protected Object clone() throws CloneNotSupportedException {
	Person cloned = (Person) super.clone();
	cloned.address = (Address) address.clone(); // Create a deep copy of Address
	return cloned;
}

In Address Class: implements cloneable
 // Method to create a deep copy of Address
protected Object clone() throws CloneNotSupportedException {
	return super.clone();
}

wait, notify, notifyall exists in Object class But we use only in multithread right. 
then those method we keep it inside the thread class right why it's exist in Object 
class?

The methods wait(), notify(), and notifyAll() are in the Object class because synchronization and thread coordination in Java
 are designed to work with the intrinsic locks associated with objects, not just threads. 
This design provides flexibility, allowing any object to be used as a lock for synchronizing access to shared resources.


Name few sorting algorithms and search algorithms
--------------------------------------------------------

Sorting Algorithms
Bubble Sort
Selection Sort
Insertion Sort
Merge Sort
Quick Sort


Search Algorithms
Linear Search
Binary Search
Depth-First Search (DFS)
Breadth-First Search (BFS)

what algorithm garbage collector uses. 
---------------------------------------------
Different garbage collection algorithms are used in Java to manage memory efficiently. 
The choice of algorithm can impact the performance of your application, and each has its own strategy for marking, sweeping, and compacting memory.

Algorithms Used by Garbage Collectors

Mark and Sweep
Concurrent Mark and Sweep (CMS)
Generational Garbage Collection
Reference Counting
G1 (Garbage-First) Collector

Mark and Sweep Algorithm
------------------------------
The Mark-and-Sweep algorithm is a simple method used by garbage collectors to clean up unused memory in programming languages like Java.

Imagine a toy box with various toys:

Toys in the Box:

Toy A (favorite toy, used every day)
Toy B (connected to Toy A, like a toy car that goes with a toy track)
Toy C (not connected to Toy A or B, like a random toy in the corner)

Mark Phase:
Start by marking Toy A because it's your favorite (root object).
Toy B is connected to Toy A, so you also mark Toy B.
You ignore Toy C for now because it's not connected to Toy A.

Sweep Phase:
Look at each toy and check if it's marked.
Toy A and Toy B are marked, so you keep them.
Toy C is not marked, so you put it away or throw it out.

The Mark-and-Sweep algorithm helps in cleaning up memory by marking useful objects (toys) and then sweeping away the unused ones.
 It ensures that your memory (toy box) is tidy and only contains the things you need.

The Mark-and-Sweep algorithm helps to manage memory by:

Marking: Identifying and marking the memory that is still needed.
Sweeping: Cleaning up the memory that is no longer needed.



ConcurrentModificationException
-----------------------------------

Fail-fast and Fail-safe Iterators.

In Java, the terms fail-fast and fail-safe refer to the behavior of iterators when the underlying collection is modified during iteration. 
These behaviors are crucial in concurrent programming and help ensure the integrity of collections during modification.

Fail-Fast Iterators:

Fail-fast iterators immediately throw a ConcurrentModificationException if they detect any structural modification of the collection during iteration. 
Structural modification refers to any operation that adds, removes, or changes the size of the collection.

Examples of Fail-Fast Collections:
ArrayList
HashMap
HashSet
LinkedList.

Fail-Safe Iterators: 
Fail-safe iterators do not throw ConcurrentModificationException if the collection is modified during iteration. Instead, they work on a clone of the collection,
 which ensures that any changes to the collection do not affect the iterator.

Examples of Fail-Safe Collections:
CopyOnWriteArrayList
ConcurrentHashMap

ConcurrentModificationException is a runtime exception that occurs when a collection (like ArrayList, HashMap, etc.) 
is modified while iterating over it using methods like Iterator or enhanced for loop

List<String> list = new ArrayList<>();
        list.add("A");
        list.add("B");
        list.add("C");

        for (String item : list) {
            if ("B".equals(item)) {
                list.remove(item); // This will throw ConcurrentModificationException
            }
        }
		
Overcome:
1) Using Iterator's remove Method:
while (iterator.hasNext()) {
            String item = iterator.next();
            if ("B".equals(item)) {
                iterator.remove(); // Safe removal
            }
        }
		
2) Using CopyOnWriteArrayList for Concurrent Collections:		

List<String> list = new CopyOnWriteArrayList<>();
        list.add("A");
        list.add("B");
        list.add("C");

        for (String item : list) {
            if ("B".equals(item)) {
                list.remove(item); // Safe removal
            }
        }		
Is Java pass by value or pass by reference why
---------------------------------------------------
Java uses pass-by-value for all types, including both primitive types and object references.
For primitives, this means passing a copy of the value.
For objects, this means passing a copy of the reference to the object, so while the reference is copied, the object it points to can be modified.

As the name says, the pass-by-value simply means, we pass the value of the variable(or reference variable) and not the address of the variable
(or reference variable) from the main function to the called function.		
		
		
Java 11 and Java 17 feature.
--------------------------------

Java 11:
 HttpClient for modern HTTP requests.
String methods like strip() and isBlank(), repeat(2).	

Java 17:
Text blocks for easier multiline string literals.
String json = """
    {
      "name": "John",
      "age": 30
    }
""";
	
ClassNotFoundException vs NoClassDefFoundError 
------------------------------------------------------
ClassNotFoundException:
Checked exception thrown when an application tries to load a class at runtime and the class is not found.
Needs to be handled with a try-catch block or declared in the throws clause.

Checked Exception.
try {
	// Attempt to load a class dynamically
	Class.forName("com.example.NonExistentClass");
} catch (ClassNotFoundException e) {
	// Handle the exception
	System.out.println("ClassNotFoundException caught: " + e.getMessage());
}


NoClassDefFoundError: 

Occurs when a class was present during the compile time but is not found during runtime due to various reasons 
like deletion or not being available in the classpath.

like somebody has deleted that sample.class file after the compilation.

Unchecked error.

	


