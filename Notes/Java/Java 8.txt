Java 7 Features
------------------
1) Switch With String (case sensitive)

2) Java 7 Multi Catch. (It helps to optimize code, using use vertical bar (|) to separate multiple exceptions in catch block.
     catch(ArithmeticException | ArrayIndexOutOfBoundsException e){  
            System.out.println(e.getMessage());  
        }    
		
3) Binary Literals (I allows you to express integral types (byte, short, int, and long) in binary number system. To specify a binary literal, add the prefix 0b or 0B to the integral value.)
 int i1 = -0b101;   		// prints -5
 long l1 = 0b0000011111100001; // prints 2017
 
4)  Type Inference for Generic Instance Creation

The following approach is used in Java 6 and prior version.

Ex. List<Integer> list  = new List<Integer>();  
Now, you can use the following new approach introduced in Java 7.

Ex. List<Integer> list = new List<>(); // Here, we just used diamond 

5) Java Numeric Literals with Underscore (Ot improves the readability of source code).

    int a = 10_00000;  
	System.out.println("a = "+a);  
	// Underscore in floating literal  
	float b = 10.5_000f;  
	System.out.println("b = "+b);  

Try with Resources
-----------------------
try-with-resources in Java is a feature introduced in Java 7 that simplifies resource management and ensures that resources 
(like files, database connections, etc.) are closed automatically after the operations are done. 

Automatically closes resources (such as streams, connections) that implement the AutoCloseable 
or Closeable interfaces after the try block is executed, even if an exception is thrown.

Ensures that resources are closed safely and efficiently without needing a finally block.	

Java ensures that they are closed at the end of the block (regardless of whether the block exits normally or due to an exception).

try block class should have AutoCloseable interface impolenmented in it.
	
// Automatically handles closing the resource
	try (BufferedReader br = new BufferedReader(new FileReader("test.txt"))) {
		String line;
		while ((line = br.readLine()) != null) {
			System.out.println(line);
		}
	} catch (IOException e) {
		e.printStackTrace();  // Handle the exception
	}
	
	
		
Covariant return type:
-----------------------------
Covariant return type means return type may vary during overriding.

Before Java 5, It was not allowed to override any method if the return type is changed in child class.
But now it's possible only if return type is sub class type.

class Animal {
    Animal getAnimal() {
        return this;
    }
}

class Dog extends Animal {
    @Override
    Dog getAnimal() {  // Covariant return type
        return this;
    }
}

In the Dog class, the getAnimal() method is overridden and returns a Dog object instead of just an Animal.

https://www.youtube.com/watch?v=wFvvCG0foxw&ab_channel=CodeDecode
Covariant return types in Java [ MOST TRICKY CORE JAVA INTERVIEW QUESTION ] | Code Decode

Java 5 Features
--------------
1) Assertion
2) Autoboxing and unboxing
The automatic conversion of primitive data types into its equivalent Wrapper type is known as boxing and opposite operation is known as unboxing.
int -> Integer (Boxing)
Integer -> int (Unboxing)
	 int a=30;
	 Integer a3=a;//Boxing  
	 
3) Java Enums
The Enum in Java is a data type which contains a fixed set of constants.

It can be used for days of the week (SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, and SATURDAY) , directions (NORTH, SOUTH, EAST, and WEST), season (SPRING, SUMMER, WINTER, and AUTUMN or FALL)
	 class EnumExample1{  
		//defining the enum inside the class  
		public enum Season { WINTER, SPRING, SUMMER, FALL }  
		//main method  
		public static void main(String[] args) {  
		//traversing the enum  
		for (Season s : Season.values())  
		System.out.println(s);  
	}}  

4) Java Annotation ( represents the metadata, to indicate some additional information which can be used by java compiler and JVM.)

5) Generics in Java : It makes the code stable by detecting the bugs at compile time.
List<Integer> list = new ArrayList<Integer>();    

6) For-Each loop
It makes the code more readable.
It eliminates the possibility of programming errors.
int arr[]={12,13,14,44};  
   //traversing the array with for-each loop  
   for(int i:arr){  
     System.out.println(i);  
   }  
   
7) Java Static Import
-----------------------------
The static import feature of Java 5 facilitate the java programmer to access any static member of a class directly.
 There is no need to qualify it by the class name.

import static java.lang.System.*;    
class StaticImportExample{  
  public static void main(String args[]){  
     
   out.println("Hello");//Now no need of System.out  
   out.println("Java");  
  
 }   
}      
   
   
8) Variable Argument (Varargs):
The varrags allows the method to accept zero or muliple arguments. 
If we don't know how many argument we will have to pass in the method, varargs is the better approach.

Rules for varargs:
	There can be only one variable argument in the method.
	Variable argument (varargs) must be the last argument.

	void method(String... a, int... b){}//Compile time error  
	void method(int... a, String b){}//Compile time error     

class VarargsExample3{  
   
 static void display(int num, String... values){  
  System.out.println("number is "+num);  
  for(String s:values){  
   System.out.println(s);  
  }  
 }  
  
 public static void main(String args[]){  
  
 display(500,"hello");//one argument   
 display(1000,"my","name","is","varargs");//four arguments  
 }   
} 

--------------------------------------------------------------------------------------------------------------------------------------


Functional Programming is a form of declarative programming. Each item can be run in any order to produce the same result.
Imperative Programming is procedural. State and order is important.

Why Functional Programming:

We express what we need, rather than focusing on how to do it.
Code is consise and more readable, which makes it maintainabe.
Allow parallel processing of elements in collection.
It supports lazy valuation. Stream won't evaluate unless needed.


Java 8
----------
New Features:
		Lambda Expression
		Stream API
		Default methods in the interface
		Functional Interface
		Optional
		Method references
		Date API
		Nashorn, JavaScript Engine

Lambda Expression: 		
A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not 
need a name and they can be implemented right in the body of a method.

Lambda Expression is just an anonymous(nameless) function. That means the function which doesn’t 
have the name,return type and access modifiers.
Lambda Expression also known as anonymous functions or closure

Remember, lambdas should be an expression, not a narrative. Despite its concise syntax, lambdas should specifically express the functionality they provide.

why lambdas?
  Enables functional programming
  Readable and concise code.
  Easier to use APIs and libraries
  Enables support for parallel processing.
  A function that can be created without belonging to any class.
  A lambda expression can be passed around as if it was an object and executed on demand.
  
Lambda expression   
aBlockOfCode = () -> {
 System.out.println();
}
greetFunction = () -> Syso("Hello World");
getSumOfTwoNumber = (a) -> {a+8};  
(for one line of code, we can remove the curly bracket)
Avoid Specifying Parameter Types like (int a)
Avouid return and braces.

Functional Interfaces:
------------------------------
 functional programming is supported in JAVA 8 with the help of Lambda expression. The Lambda expression supported the Functional interface. 
 These interfaces also are known as the Single Abstract method(SAM). The Lambda expressions support only those interfaces which have only one abstract method. 
 It provides a body to the abstract method and an assigned as the reference of the interface.
 
if an interface contain only one abstract method, such type of interfaces are called functional 
interfaces and the method is called functional method or single abstract method(SAM).

Example:
@FunctionalInterface
interface MyFunctionalInterface {
    void execute(String message);
}

public class LambdaExample {
    public static void main(String[] args) {
        // Using a lambda expression to implement the functional interface
        MyFunctionalInterface myFunc = (message) -> System.out.println("Message: " + message);
        
        // Calling the execute method
        myFunc.execute("Hello, Lambda!");
    }
}


Why only one SAM:
----------------------------
 Important : The functional interface also known as Single Abstract Method Interface was introduced to facilitate Lambda functions. 
Since a lambda function can only provide the implementation for 1 method it is mandatory for the functional interface to have ONLY one abstract method.

The key is that it's designed to be used with lambda expressions.

public interface Display 
{
    public void show();
}

public class ExampleWithLambda
{
    public static void main(String[] args) 
    {
        Display display = () -> {
            System.out.println("In Show interface we have only Single abstract method");
            System.out.println("This is the body of abstract method");
        };
        display.show();
    }
}

If we have two abstract method, it doesn't know for which method the lambda logic has imlemented . To avoid it. we use one SAM.


Ex:
1) Runnable  It contains only run() method
2) Comparable  It contains only compareTo() metho
3) ActionListener  It contains only actionPerformed()
4) Callable  It contains only call()method

4 types of functional interface.
Consumer => accept(T t) => accepts single input and returns no result.
Supplier => T get() => accepts no input but returns a result
Predicate => test() It return boolean value. (stream.filter method)
Function. => apply() It return one value of any type. (stream.map method)

Tricky java 8 interview questions on Functional Interface | Can we Override a Object class method ?
https://www.youtube.com/watch?v=khhn0abkX3g&ab_channel=SeleniumExpress

BiConsumer and BiPredicate are functional interfaces that operate on two input arguments

Consumer<String> consumer = s -> System.out.println("Hello, " + s);
consumer.accept("Alice");  // Output: Hello, Alice

BiConsumer<String, Integer> biConsumer = (name, age) -> 
System.out.println(name + " is " + age + " years old.");
biConsumer.accept("Alice", 30);  // Output: Alice is 30 years old.

Predicate<Integer> isEven = n -> n % 2 == 0;
System.out.println(isEven.test(4));

BiPredicate<Integer, Integer> isSumEven = (a, b) -> (a + b) % 2 == 0;
System.out.println(isSumEven.test(3, 5));  // Output: true

A single method interface is also sometimes referred to as a functional interface. Matching a Java lambda expression against a functional interface is divided into these steps:

Does the interface have only one abstract (unimplemented) method?
Does the parameters of the lambda expression match the parameters of the single method?
Does the return type of the lambda expression match the return type of the single method?
If the answer is yes to these three questions, then the given lambda expression is matched successfully against the interface.


Inside functional interface in addition to single Abstract method(SAM) we write any number of 
default and static methods.
Ex:
1) interface Interf { 
2) public abstract void m1(); 
3) default void m2() { 
4) System.out.println (â€œhelloâ€ ); 
5) } 
6) } 
In Java 8 ,SunMicroSystem introduced @FunctionalInterface annotation to specify that the interface is 
FunctionalInterface.

Ex: 
@FunctionalInterface
Interface Interf { this code compiles without any compilation errors.
 public void m1();
 }

If 2 interface has  same default method and that uses in a class. how that will work.
---------------------------------------------------------------------------------------- 
interface InterfaceA {
    default void defaultMethod() {
        System.out.println("InterfaceA default method");
    }
}

interface InterfaceB {
    default void defaultMethod() {
        System.out.println("InterfaceB default method");
    }
}

class MyClass implements InterfaceA, InterfaceB {

    // Explicitly overriding the default method to resolve the conflict
    @Override
    public void defaultMethod() {
        // You can choose to call one of the interface methods
        InterfaceA.super.defaultMethod(); // Calling InterfaceA's default method
        // InterfaceB.super.defaultMethod(); // Or you can call InterfaceB's method instead
     }
}	

Default Method:
A default method allows you to add a method implementation to an interface without forcing all implementing classes to override it. 
This helps avoid breaking existing code when new methods are added to an interface.
Default methods are often used when enhancing libraries or APIs to introduce new methods while maintaining backward compatibility.


Real-Time Use Case: Imagine you have an interface Vehicle with an existing set of methods.
 You need to introduce a new method startEngine() without breaking all the classes that have already implemented this interface.


2. Static Methods
A static method in an interface is similar to a static method in a class. It belongs to the interface itself and can be called without needing an instance of the interface.
It is used for utility or helper methods  such as validation, formatting related to the interface but doesn't depend on the instance of a class.

public interface Vehicle {
    void drive();

	// Default method added without breaking existing implementations
    default void startEngine() {
        System.out.println("Engine started");
    }
    // Static method for utility purposes
    static boolean isValidSpeed(int speed) {
        return speed > 0 && speed <= 200;
    }
}

 
Predicate:
---------------
A predicate is a function with a single argument and returns boolean values


Ex:
interface Predicate<T> {
 public boolean test(T t);
}
As predicate is a functional interface and hence it can refers lambda expression.

It has  below default method.
and()
or()
negate()
 
 
Write a predicate to check whether the given integer is greater than 10 or not.
Ex:
public boolean test(Integer I) {
 if (I >10) {
 return true;
 }
 else {
 return false;
 }
}

TO:

predicate<Integer> p = I -> (I >10);
System.out.println (p.test(100)); true
System.out.println (p.test(7)); false

Function:
-------------
Functions are exactly same as predicates except that functions can return any type of result.

Function can take 2 type Parameters.first one represent Input argument type and Second one represent return Type. 
Function<T,R>

interface function(T,R) {
 public R apply(T t);
}

Assignment:
Write a function to find length of given input string.
Ex:
1) import java.util.function.*; 
2) class Test { 
3) public static void main(String[] args) { 
4) Function<String, Integer> f = s ->s.length(); 
5) System.out.println(f.apply("Durga")); 
6) System.out.println(f.apply("Soft")); 
7) } 
8) }
 
 
 
 
 Interface static method: we should call interface static methods by using interface name not using class or object name.
 
 From 1.8 version onwards we can write main()method inside interface and hence we can run interface 
directly from the command prompt.
Ex:
1) interface Interf { 
2) public static void main(String[] args) { 
3) System.out.println("Interface Main Method"); 
4) } 
5) } 

java.util.Optional
--------------
Java 8 documentation says that an Optional is "A container object which may or may not contain a non-null value. 
If a value is present, isPresent() will return true and get() will return the value."

purpose
----------
Optional is intended to provide a limited mechanism for library method return types where there is a clear need to represent "No result"
and where using null for that is overwhelmingly likely to cause errors.

Optional class basically help us to avoid writing null check and avoid NullPointerException. 
Optional makes us deal with nullable values explicitly as a way of enforcing good programming practices.
You can view Optional as single-value container that either contains a value or doesn't (it is then said to be "empty"). 
But for sure it won't throw NullPointerException.

Advantages
---------
Null checks are not required.
No more NullPointerException at runtime.
we can develop clean and neat API
No more boiler plate code.
To avoid abnormal termination, we use the Optional class. 

Optional.Of(str) // the argument should not allow null value otherwise it'll throw NullPointerException.
optional.ofNullable(str) // the argument can allow null value. it'll not throw NullPointerException rather returns empty Optional object.


String b = null;
Optional<String> s = Optional.Empty(); // same as above stmt. s=null
Optional<String> s = null // It Cannot be NULL.

get() can only return a value if the wrapped object not null, otherwise it will throw NoSuchElementException
(e.g): Employee e = repo.findById(id).get(); // if we pass id which is not available in db.

hence we should call get() method by conditioning it using isPresent()

Optional<String> optionalStr = Optional.ofNullable(str);
optionalStr.ifPresent(s -> System.out.println(s.length()));


Optional<Employee> e = repo.findById(id);
if(e.isPresent()) {
  Optional<String> empName = Optional.ofNullable(e.get().getName())
  if(empName.isPresent()) {
     return new ResponseEntity
  return new ResponseEntity<>(e.get(), HttpStatus.OK)
} else {
  return new ResponseEntity<>("Sorry employee with the give id is not found", HttpStatus.NOT_FOUND)
  }
  
orElse(default) // opt.map(Customer::getName).orElse("Unknown")
orElseGet(supplier) // opt.orElseGet(Data::new)
orElseThrow(exceptionSupplier)// opt.orElseThrow(IllegalArumentException::new)

Optional<User> user = findUser();
System.out.println(user.map(User::getName).orElse("User not found"));

 
Avoid using Optional in
1) Fields
2) Method Parameters 
3) COllections

Remember eliminating nulls isn't a goal of Optional.

https://www.oracle.com/technical-resources/articles/java/java8-optional.html
https://javarevisited.blogspot.com/2017/04/10-examples-of-optional-in-java-8.html#axzz7QLAEHs9j
https://homes.cs.washington.edu/~mernst/advice/nothing-is-better-than-optional.html
https://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html

https://www.youtube.com/watch?v=hjIlTaAMsbI&ab_channel=ContinuousDelivery (explore)
https://www.youtube.com/watch?v=salqMzVPopM&ab_channel=ITian


what is stream
-------------------

the Stream API is used to process collections of objects. 
A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired result.

The features of Java stream are –

1) A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
2) Streams don’t change the original data structure, they only provide the result as per the pipelined methods.
3) Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined.
 Terminal operations mark the end of the stream and return the result.
 
 
intermediate operation (filter, map etc) to convert to abstract type
terminal operation (COllect, min, max,forEach, reduce, group by etc) to convert to concreate type
(entire stream operation will work only we have terminal operation in it) therefore stream is called as Lazy valuation

DIfferent ways to create streams
1) Stream.of(val1, val2,..)
2) Stream.of(arrayOfElement) Stream.of(new Integer[]{1,2,3})
3) List.stream
4) Arrays.stream(T[])


map vs flatMap
--------------------
map: Transforms each element into another element.
One-to-one (each element maps to a single element).
Output will be Stream of transformed elements.
Example: Squaring numbers in a list: [1, 2, 3] → [1, 4, 9].

List<Integer> numbers = Arrays.asList(1, 2, 3);
List<Integer> squared = numbers.stream().map(n -> n * n).collect(Collectors.toList());
// Output: [1, 4, 9]


flapMap: 
Transforms each element into a stream and flattens the streams.
One-to-many (each element maps to a stream of elements).
Output will be Flattened stream of elements.
Example: Flattening a list of lists: [[1, 2], [3, 4]] → [1, 2, 3, 4].

List<List<Integer>> lists = Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4));
List<Integer> flattened = lists.stream().flatMap(List::stream).collect(Collectors.toList());
// Output: [1, 2, 3, 4]


comparingByKey and comparingByValue and reverseOrder for key and value.
------------------------------------------------------
 .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder()))  (replace it like this)

Map<Integer,String> map=new HashMap<Integer,String>();          
      map.put(100,"Amit");    
      map.put(101,"Vijay");    
      map.put(102,"Rahul");   
      //Returns a Set view of the mappings contained in this map        
      map.entrySet()  
      //Returns a sequential Stream with this collection as its source  
      .stream()  
      //Sorted according to the provided Comparator  
      .sorted(Map.Entry.comparingByKey())  
      //Performs an action for each element of this stream  
      .forEach(System.out::println);  
 }
 
100=Amit
101=Vijay
102=Rahul 
 
Map<Integer,String> map=new HashMap<Integer,String>();          
      map.put(100,"Amit");    
      map.put(101,"Vijay");    
      map.put(102,"Rahul");    
      //Returns a Set view of the mappings contained in this map    
      map.entrySet()  
      //Returns a sequential Stream with this collection as its source  
      .stream()  
      //Sorted according to the provided Comparator  
      .sorted(Map.Entry.comparingByValue())  
      //Performs an action for each element of this stream  
      .forEach(System.out::println);  
 }  
100=Amit
102=Rahul
101=Vijay 









Use Java's Consumer interface to store a lambda expression in a variable:
public static void main(String[] args) {
    ArrayList<Integer> numbers = new ArrayList<Integer>();
    numbers.add(5);
    numbers.add(9);
    numbers.add(8);
    numbers.add(1);
    Consumer<Integer> method = (n) -> { System.out.println(n); };
    numbers.forEach( method );
  }
  
  
  
List<Product>productsList = new ArrayList<Product>();  
        //Adding Products  
        productsList.add(newProduct(1,"HP Laptop",25000f));  
        productsList.add(newProduct(2,"Dell Laptop",30000f));  
        productsList.add(newProduct(3,"Lenevo Laptop",28000f));  
        productsList.add(newProduct(4,"Sony Laptop",28000f));  
        productsList.add(newProduct(5,"Apple Laptop",90000f));  

Set<Float>productPriceList =   
                productsList.stream()  
                            .map(x->x.price)         // fetching price  
                            .collect(Collectors.toSet());   // collecting as list  
        System.out.println(productPriceList);
		
Java Collectors Example: using sum and average method
------------------------------------------------------------
 Double sumPrices =   
                productsList.stream()  
                            .collect(Collectors.summingDouble(x->x.price));  // collecting as list  
        System.out.println("Sum of prices: "+sumPrices);  
Integer sumId =   
		productsList.stream().collect(Collectors.summingInt(x->x.id));  
System.out.println("Sum of id's: "+sumId);  
		
Double average = productsList.stream()  
                         .collect(Collectors.averagingDouble(p->p.price));  
        System.out.println("Average price is: "+average);  		
		
		
Stream Processing -
___________________________________________________________________________

Collect - 
If we want to collect elements of stream after filtering or mapping and add them to the required collection then use collect method.

Count - 
If we want to count how many elements are there in collection that satisfy given condition then use count method.

sorted - 
If we want to sort elements inside a stream use this sorted() method.
We can sort based on default natural sorting order 
If we want to sort using customized sorting order then use comparator.

Comparator 
If we want to sort using customized sorting order then use comparator.

Min Max-
Min(Comparator)  will return the minimum value based on the defined comparator
Max(Comparator)  will return the maximum value based on the defined comparator

Foreach
forEach() is a method . 
All methods that we saw till now returned something, like min max value, sorted collection, etc
This method does not return anything. 
Rather This method takes lambda expression as argument and apply that lambda expression to each element present in that stream.

toArray- 

of() - 
Stream concept is not applicable just for the collections it’s also applicable for “ANY GROUP OF VALUE”.
Even for arrays you can use stream.
Stream . Of() this method can take any group of values and convert them to stream so that multiple stream operations can be applied to it.		

Stream with sorted(), min and max
sorted
----------
If we want to sort elements inside a stream use this sorted() method.
We can sort based on default natural sorting order 
If we want to sort using customized sorting order then use comparator.

filteredStream.sorted((i1, i2) -> i1.compareTo(i2))  // ascending or natural sorting
filteredStream.sorted((i1, i2) -> i2.compareTo(i1))  // descending

 List<Integer> sortedList = arrList.stream()
                                          .sorted(Comparator.comparing(Integer::intValue))
                                          .collect(Collectors.toList());
										  
										  List<String> stringList = Arrays.asList("Banana", "Apple", "Orange", "Mango");

// Sorting the list of strings in ascending order using streams and Comparator.comparing()
List<String> sortedList = stringList.stream()
									.sorted(Comparator.comparing(String::toString))
									.collect(Collectors.toList());

Since strings are Comparable by default, you can simply use the sorted() method without the need for Comparator.comparing():
 // Sorting the list of strings in ascending order using natural ordering
        List<String> sortedList = stringList.stream()
                                            .sorted() // No need for Comparator.comparing()
                                            .collect(Collectors.toList());
 
To sort in reverse order, use Comparator.reverseOrder() with the sorted() method in a stream.

Min Max
------------
If we want to sort using customized sorting order then use comparator.

Min Max-
Min(Comparator)  will return the minimum value based on the defined comparator
Max(Comparator)  will return the maximum value based on the defined comparator

arrList.stream().min((i1, i2) -> i1.compareTo(i2)).get();
arrList.stream().max((i1, i2) -> i1.compareTo(i2)).get();

arrList.stream().min(Comparator.comparing(Integer::intValue));


toArray()
-----------
Always return Object[].
Object[] intArr = arrList.stream().filter(i -> i>2).toArray();

Integer[] ir = l1.stream().toArray(Integer[] :: new);
for(Integer i: ir) {
 sop(i);
 }

Of()
---------
Stream concept is not applicable just for the collections it’s also applicable for “ANY GROUP OF VALUE”.
Even for arrays you can use stream.
Stream . Of() this method can take any group of values and convert them to stream so that multiple stream operations can be applied to it.	

Stream.of(1,11,111,1111,11111).forEach(System.out::println());

String[] name = {"Test", "Code", "Stream"};
Stream.of(name).filter(x-> x.length >2).forEach(System.out::println())

Java StringJoiner
---------------------
Java added a new final class StringJoiner in java.util package. It is used to construct a sequence of characters separated by a delimiter.
 Now, you can create string by passing delimiters like comma(,), hyphen(-) etc. You can also pass prefix and suffix to the char sequence.

 public static void main(String[] args) {  
        StringJoiner joinNames = new StringJoiner(","); // passing comma(,) as delimiter   
          
        // Adding values to StringJoiner  
        joinNames.add("Rahul");  
        joinNames.add("Raju");  
        joinNames.add("Peter");  
        joinNames.add("Raheem");  
                  
        System.out.println(joinNames);  
    }  
	
	Output: Rahul,Raju,Peter,Raheem
	
	
	
Java 9 features.
------------------
Oracle has released Java 9 with rich set of new features. It includes various upgrades to the Java programming, JVM, Tools and libraries

1) Platform Module System (Project Jigsaw)
Java Module System is a major change in Java 9 version. Java added this feature to collect Java packages and code into a single unit called module.
In earlier versions of Java, there was no concept of module to create modular Java applications, that why size of application 
increased and difficult to move around. Even JDK itself was too heavy in size, in Java 8, rt.jar file size is around 64MB.

To deal with situation, Java 9 restructured JDK into set of modules so that we can use only required module for our project.

2) Interface Private Methods
In Java 9, we can create private methods inside an interface. Interface allows us to declare private methods that help to share common code between non-abstract methods.
	
3) JShell: The Java Shell (REPL)
It is an interactive Java Shell tool, it allows us to execute Java code from the shell and shows output immediately. JShell is a REPL (Read Evaluate Print Loop) tool and run from the command line. It is benificial, if we want to test our business logic and get result immediately. 	
	
